{"version":3,"sources":["redux/reducers/tasks.js","utils/tasksGenerator.js","utils/constants.js","redux/actionTypes.js","redux/configureStore.js","redux/reducers/addFinalResult.js","redux/reducers/addUserName.js","utils/validation.js","components/registerPage/parts/CustomTextInput/CustomTextInput.js","components/registerPage/parts/RegisterForm/RegisterForm.js","components/registerPage/RegisterPage.js","redux/actions/UserName.js","components/tasksPage/parts/CustomField/CustomField.js","components/tasksPage/parts/TaskItem/TaskItem.js","components/tasksPage/parts/Tasks/Tasks.js","components/tasksPage/TasksPage.js","redux/actions/FinalResult.js","utils/getFinalResult.js","components/resultsPage/parts/ResultsListItem/ResultsListItem.js","components/resultsPage/ResultsPage.js","components/App/App.js","index.js"],"names":["TASKS","tasksNumber","tasks","i","num1","Math","floor","random","num2","sign","round","push","tasksGenerator","ADD_RESULT","ADD_USER_NAME","rootReducer","combineReducers","state","action","type","finalResult","ActionTypes","payload","userName","form","formReducer","store","createStore","validate","values","errors","name","length","CustomTextInput","input","meta","touched","error","className","autoComplete","maxLength","RegisterForm","handleSubmit","onSubmit","htmlFor","Field","component","onClick","reduxForm","selector","formValueSelector","connect","myFormValueSelector","dispatch","addName","UserName","history","useHistory","CustomField","TaskItem","task","index","Tasks","data","console","log","map","addResult","result","FinalResult","valuesLength","getFormValues","Object","keys","resultArray","Number","parseInt","right","getResultsArray","ResultsListItem","textClassName","resultValues","rightAnswersNumber","filter","item","App","path","exact","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5286a173.chunk.js","sourcesContent":["import tasksGenerator from '../../utils/tasksGenerator';\r\nimport TASKS_NUMBER from '../../utils/constants';\r\n\r\nconst TASKS = tasksGenerator(TASKS_NUMBER);\r\n\r\nexport const Tasks = (state = TASKS, action) => {\r\n    switch (action.type) {\r\n        default:\r\n          return state;\r\n      }\r\n};\r\n","const tasksGenerator = (tasksNumber) => {\r\n    const tasks = [];  \r\n\r\n    for (let i = 0; i < tasksNumber; i++) {\r\n        const num1 = Math.floor(Math.random() * 100);\r\n        const num2 = Math.floor(Math.random() * 100);\r\n        const sign = Math.round(Math.random());\r\n        tasks.push({ num1: num1, num2: num2, sign: sign })\r\n    }\r\n    return tasks;\r\n}\r\n\r\nexport default tasksGenerator;","const TASKS_NUMBER = 10;\r\n\r\nexport default TASKS_NUMBER;","export const ADD_RESULT = \"ADD_RESULT\";\r\nexport const ADD_USER_NAME = \"ADD_USER_NAME\";\r\n\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { Tasks } from './reducers/tasks'\r\nimport { addFinalResult } from \"./reducers/addFinalResult\";\r\nimport { addUserName } from \"./reducers/addUserName\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: Tasks,\r\n  finalResult: addFinalResult,\r\n  userName: addUserName,\r\n  form: formReducer\r\n})\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store;\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const addFinalResult = (state = [], action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_RESULT:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const addUserName = (state = 'Аноним', action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_USER_NAME:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","function validate(values) {\r\n    const errors = {};\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        let name = `task${i}`\r\n        if (values[name] && values[name].length > 3) {\r\n            errors[name] = \"Введите не более 3х цифр\";\r\n        }\r\n    }\r\n\r\n    if (!values.name) {\r\n        errors.name = 'Заполните поле';\r\n    } else if (values.name.length < 3) {\r\n        errors.name = 'Введите не менее 3х символов';\r\n    }\r\n    else if (values.name.length > 14) {\r\n        errors.name = 'Введите не более 15 символов';\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default validate;","import './CustomTextInput.css'\r\n\r\nconst CustomTextInput = ({ input, type, meta: { touched, error } }) => (\r\n    <div className=\"input-name\">\r\n        <input autoComplete=\"off\" className=\"input-name__text\" {...input} type={type} maxLength='15' />\r\n        {touched && error && <span className=\"input-name__error\">{error}</span>}\r\n    </div>\r\n  )\r\n\r\n  export default CustomTextInput;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\r\nimport validate from '../../../../utils/validation';\r\nimport CustomTextInput from '../CustomTextInput/CustomTextInput';\r\nimport './RegisterForm.css'\r\n\r\nlet RegisterForm = ({ handleSubmit, userName }) => {\r\n    return (\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n            <label className=\"form__label\" htmlFor=\"name\">Введите имя</label>\r\n            <Field className=\"form__input\" name=\"name\" type=\"text\" component={CustomTextInput} />\r\n            {(userName && userName.length > 2) ? <button className=\"form__button form__button_active\" onClick={handleSubmit}>Готово!</button>\r\n                : <div className=\"form__button form__button_inactive\">Готово!</div>}\r\n        </form>\r\n    );\r\n};\r\n\r\nRegisterForm = reduxForm({\r\n    form: 'registerForm',\r\n    validate\r\n})(RegisterForm)\r\n\r\nconst selector = formValueSelector('registerForm')\r\n\r\nexport default connect(state => ({\r\n    userName: selector(state, 'name'),\r\n}))(RegisterForm);","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { formValueSelector } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport RegisterForm from './parts/RegisterForm/RegisterForm';\r\nimport { UserName } from '../../redux/actions/UserName'\r\nimport './RegisterPage.css'\r\n\r\nconst RegisterPage = ({ addName, userName }) => {\r\n    let history = useHistory();\r\n\r\n    function handleSubmit() {\r\n        addName(userName);\r\n        history.push(\"/tasks\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <RegisterForm onSubmit={handleSubmit} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst myFormValueSelector = formValueSelector('registerForm');\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      userName: myFormValueSelector(state, 'name')\r\n    }\r\n  }\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addName: name => dispatch(UserName(name))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const UserName = (name) => ({\r\n    type: ActionTypes.ADD_USER_NAME,\r\n    payload: name\r\n});\r\n","import './CustomField.css'\r\n\r\nconst CustomField = ({ input, type, meta: { touched, error } }) => (\r\n    <div>\r\n        <input autoComplete=\"off\" className=\"task-input\" {...input} type={type} />\r\n        {touched && error && <span className=\"task-input__error\">{error}</span>}\r\n    </div>\r\n  )\r\n\r\n  export default CustomField;","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport CustomField from '../CustomField/CustomField'\r\nimport validate from '../../../../utils/validation'\r\nimport './TaskItem.css'\r\n\r\nlet TaskItem = ({ task, index, handleSubmit }) => {\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div className=\"task\">\r\n            <div className=\"task__text-group\">            \r\n                <p className='task__text'>{task.num1}</p>\r\n                <p className='task__text'>{task.sign === 1 ? ' + ' : ' - '}</p>\r\n                <p className='task__text'>{`${task.num2} =`}</p></div>\r\n            <Field name={`task${index}`}\r\n                component={CustomField}\r\n                type=\"number\"\r\n            />\r\n        </div>\r\n    </form>\r\n}\r\n\r\nTaskItem = reduxForm({\r\n    form: 'taskForm',\r\n    validate\r\n})(TaskItem)\r\n\r\n\r\nexport default TaskItem;","import TaskItem from '../TaskItem/TaskItem'\r\nimport './Tasks.css'\r\n\r\nconst Tasks = ({tasks}) => {\r\n\r\n    function handleSubmit(data) {\r\n        console.log(data)\r\n    }\r\n    return (\r\n        <div className=\"tasks\">\r\n            {tasks && <ul>\r\n                {tasks.map((task, index) => (\r\n                    <li key={index}>\r\n                        <TaskItem\r\n                            onSubmit={handleSubmit}\r\n                            task={task}\r\n                            index={index}\r\n                        />\r\n                    </li>\r\n                ))}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;","import Tasks from './parts/Tasks/Tasks'\r\nimport { getFormValues } from 'redux-form'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getFinalResult, getResultsArray } from '../../utils/getFinalResult';\r\nimport { FinalResult } from '../../redux/actions/FinalResult';\r\nimport './TasksPage.css'\r\n\r\nlet TasksMain = ({ state, tasks, addResult }) => {\r\n  let history = useHistory()\r\n\r\n  /*достаем из формы taskForm все заполненные поля\r\n  (результаты вычислений) и проверяем их количество*/\r\n  const values = getFormValues('taskForm')(state)\r\n  let valuesLength;\r\n  values ? valuesLength = Object.keys(values).length : valuesLength = 0;\r\n\r\n  function handleSubmit() {\r\n    history.push(\"/results\");\r\n    const resultArray = getResultsArray(tasks, values);\r\n    addResult(resultArray);\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculations\">\r\n      <h1 className=\"calculations__heading\">Проверьте свои знания</h1>\r\n      <Tasks tasks={tasks} />\r\n      {(!values || valuesLength !== 10) &&\r\n        <div className=\"form__error\">Решите все примеры</div>\r\n      }\r\n      {(values && valuesLength === 10) ?\r\n        <button className=\"form__button form__button_active\" onClick={handleSubmit}>Готово!</button>\r\n        : <div className=\"form__button form__button_inactive\">Готово!</div>\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state: state,\r\n    tasks: state.tasks\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addResult: result => dispatch(FinalResult(result))\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksMain)","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const FinalResult = (result) => ({\r\n    type: ActionTypes.ADD_RESULT,\r\n    payload: result\r\n});\r\n","export function getResultsArray(tasks, values) {\r\n    const resultArray = [];\r\n    for (let i = 0; i < tasks.length; i++) {\r\n        let task = tasks[i];\r\n        let name = `task${i}`\r\n        let result = values[name];\r\n        result = Number.parseInt(result);\r\n        let answer;\r\n        task.sign < 1 ? answer = task.num1 - task.num2 : answer = task.num1 + task.num2;\r\n        answer === result ? resultArray.push({task, result, right: 1}) : resultArray.push({task, result, right: 0});\r\n    }\r\n\r\n    return resultArray;\r\n}\r\n\r\n","import './ResultsListItem.css'\r\n\r\nconst ResultsListItem = ({ task, result, right }) => {\r\n    const textClassName = `result__text ${!right && `result__text_red`}`;\r\n\r\n    return (<div className='result'>\r\n        <div className='result__text-group'>\r\n            <p className={textClassName}>{task.num1}</p>\r\n            <p className={textClassName}>{task.sign === 1 ? ' + ' : ' - '}</p>\r\n            <p className={textClassName}>{`${task.num2} =`}</p>\r\n            <p className={textClassName}>{result}</p>\r\n        </div>\r\n    </div>)\r\n}\r\nexport default ResultsListItem","import { connect } from 'react-redux'\r\nimport ResultsListItem from './parts/ResultsListItem/ResultsListItem';\r\nimport './ResultsPage.css'\r\n\r\nconst ResultsPage = ({ resultValues, userName }) => {\r\n  const rightAnswersNumber = resultValues.filter(item => item.right === 1).length;\r\n\r\n  return (\r\n    <div className=\"results\">\r\n      <p>{`${userName} - молодец!`}</p>\r\n      <p>{`Правильных ответов: ${rightAnswersNumber} `}</p>\r\n      <ul className=\"results__list\">\r\n        {resultValues.map((item, index) =>\r\n          <li key={index}>\r\n            <ResultsListItem\r\n              task={item.task}\r\n              right={item.right}\r\n              result={item.result} /></li>)}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    resultValues: state.finalResult,\r\n    userName: state.userName\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(ResultsPage);","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"../../redux/configureStore\";\nimport { RegisterPage, TasksPage, ResultsPage } from '..';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"page\">\n      <Provider store={store}>\n        <Switch>\n          <Route path=\"/sign-in\">\n            <RegisterPage />\n          </Route>\n          <Route exact path=\"/tasks\">\n            <TasksPage />\n          </Route>\n          <Route exact path=\"/results\">\n            <ResultsPage />\n          </Route>\n          <Redirect to=\"/sign-in\" />\n        </Switch>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}
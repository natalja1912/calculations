{"version":3,"sources":["redux/reducers/tasks.js","utils/tasksGenerator.js","utils/constants.js","redux/actionTypes.js","redux/configureStore.js","redux/reducers/addFinalResult.js","redux/reducers/addUserName.js","components/Register/Register.js","components/Tasks/Tasks.js","utils/getFinalResult.js","components/TasksMain/TasksMain.js","redux/actions/FinalResult.js","utils/numbersValidation.js","components/TaskItem/TaskItem.js","components/CustomField/CustomField.js","components/ResultsPage/ResultsPage.js","components/App/App.js","index.js"],"names":["TASKS","tasksNumber","tasks","i","num1","Math","floor","random","num2","sign","round","push","tasksGenerator","ADD_RESULT","ADD_USER_NAME","rootReducer","combineReducers","state","action","type","finalResult","ActionTypes","payload","userName","form","formReducer","store","createStore","Register","handleSubmit","className","onSubmit","htmlFor","Field","name","component","onClick","reduxForm","validate","values","errors","length","Tasks","data","console","log","map","task","index","getFinalResult","rightAnswers","result","Number","parseInt","connect","dispatch","addResult","FinalResult","valuesLength","history","useHistory","getFormValues","Object","keys","rightAnswersNumber","TaskItem","CustomField","input","meta","touched","error","autoComplete","App","getState","path","exact","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9343051a.chunk.js","sourcesContent":["import tasksGenerator from '../../utils/tasksGenerator';\r\nimport TASKS_NUMBER from '../../utils/constants';\r\n\r\nconst TASKS = tasksGenerator(TASKS_NUMBER);\r\n\r\nexport const Tasks = (state = TASKS, action) => {\r\n    switch (action.type) {\r\n        default:\r\n          return state;\r\n      }\r\n};\r\n","const tasksGenerator = (tasksNumber) => {\r\n    const tasks = [];  \r\n\r\n    for (let i = 0; i < tasksNumber; i++) {\r\n        const num1 = Math.floor(Math.random() * 100);\r\n        const num2 = Math.floor(Math.random() * 100);\r\n        const sign = Math.round(Math.random());\r\n        tasks.push({ num1: num1, num2: num2, sign: sign })\r\n    }\r\n    return tasks;\r\n}\r\n\r\nexport default tasksGenerator;","const TASKS_NUMBER = 10;\r\n\r\nexport default TASKS_NUMBER;","export const ADD_RESULT = \"ADD_RESULT\";\r\nexport const ADD_USER_NAME = \"ADD_USER_NAME\";\r\n\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { Tasks } from './reducers/tasks'\r\nimport { addFinalResult } from \"./reducers/addFinalResult\";\r\nimport { addUserName } from \"./reducers/addUserName\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: Tasks,\r\n  finalResult: addFinalResult,\r\n  userName: addUserName,\r\n  form: formReducer\r\n})\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store;\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const addFinalResult = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_RESULT:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const addUserName = (state = 'Аноним', action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_USER_NAME:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport './Register.css'\r\n\r\nconst validate = values => {\r\n    const errors = {};\r\n    if (!values.name) {\r\n        errors.name = 'Заполните поле';\r\n    } else if (values.name.length < 3) {\r\n        errors.name = 'Введите не менее 3х символов';\r\n    }\r\n    else if (values.name.length > 15) {\r\n        errors.name = 'Введите не более 15 символов';\r\n    }\r\n    return errors;\r\n};\r\n\r\nlet Register = ({handleSubmit}) => {\r\n    return (\r\n        <div className=\"main\">\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n                <label className=\"form__label\" htmlFor=\"name\">Введите имя</label>\r\n                <Field className=\"form__input\" name=\"name\" type=\"text\" component=\"input\"  />\r\n                <button className=\"form__button form__button_active\" onClick={handleSubmit}>Готово!</button>\r\n                : <div className=\"form__button form__button_inactive\">Готово!</div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nRegister = reduxForm({\r\n    form: 'registerForm',\r\n    validate\r\n})(Register)\r\n\r\nexport default Register;\r\n","import { TaskItem } from '..'\r\nimport './Tasks.css'\r\n\r\nconst Tasks = ({tasks}) => {\r\n\r\n    function handleSubmit(data) {\r\n        console.log(data)\r\n    }\r\n    return (\r\n        <div className=\"tasks\">\r\n            {tasks && <ul>\r\n                {tasks.map((task, index) => (\r\n                    <li key={index}>\r\n                        <TaskItem\r\n                            onSubmit={handleSubmit}\r\n                            task={task}\r\n                            index={index}\r\n                        />\r\n                    </li>\r\n                ))}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;","function getFinalResult(tasks, values) {\r\n    let rightAnswers = 0;\r\n    for (let i = 0; i < tasks.length; i++) {\r\n        let task = tasks[i];\r\n        let name = `task${i}`\r\n        let result = values[name];\r\n        result = Number.parseInt(result);\r\n        let answer;\r\n        task.sign < 1 ? answer = task.num1 - task.num2 : answer = task.num1 + task.num2;\r\n        answer === result && rightAnswers++;\r\n    }\r\n\r\n    return rightAnswers;\r\n}\r\n\r\nexport default getFinalResult;","import { Tasks } from '..'\r\nimport { getFormValues } from 'redux-form'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport getFinalResult from '../../utils/getFinalResult';\r\nimport { FinalResult } from '../../redux/actions/FinalResult';\r\nimport './TasksMain.css'\r\n\r\nlet TasksMain = ({ state, tasks, addResult }) => {\r\n  let history = useHistory()\r\n\r\n  /*достаем из формы taskForm все заполненные поля\r\n  (результаты вычислений) и проверяем их количество*/\r\n  const values = getFormValues('taskForm')(state)\r\n  let valuesLength;\r\n  values ? valuesLength = Object.keys(values).length : valuesLength = 0;\r\n\r\n  function handleSubmit() {\r\n    history.push(\"/results\");\r\n    const rightAnswersNumber = getFinalResult(tasks, values);\r\n    addResult(rightAnswersNumber);\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculations\">\r\n      <h1 className=\"calculations__heading\">Проверьте свои знания</h1>\r\n      <Tasks tasks={tasks} />\r\n      {(!values || valuesLength !== 10) &&\r\n        <div className=\"form__error\">Решите все примеры</div>\r\n      }\r\n      {(values && valuesLength === 10) ?\r\n        <button className=\"form__button form__button_active\" onClick={handleSubmit}>Готово!</button>\r\n        : <div className=\"form__button form__button_inactive\">Готово!</div>\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state: state,\r\n    tasks: state.tasks\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addResult: result => dispatch(FinalResult(result))\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksMain)","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const FinalResult = (result) => ({\r\n    type: ActionTypes.ADD_RESULT,\r\n    payload: result\r\n});\r\n","function validate(values) {\r\n    const errors = {};\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        let name = `task${i}`\r\n        if (values[name] && values[name].length > 3) {\r\n            errors[name] = \"Введите не более 3х цифр\";\r\n        }\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default validate;","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { CustomField } from '../'\r\nimport validate from '../../utils/numbersValidation'\r\nimport './TaskItem.css'\r\n\r\nlet TaskItem = ({ task, index, handleSubmit }) => {\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div className=\"task\">\r\n            <div className=\"task__text-group\">            \r\n                <p className='task__text'>{task.num1}</p>\r\n                <p className='task__text'>{task.sign === 1 ? ' + ' : ' - '}</p>\r\n                <p className='task__text'>{`${task.num2} =`}</p></div>\r\n            <Field name={`task${index}`}\r\n                component={CustomField}\r\n                type=\"number\"\r\n            />\r\n        </div>\r\n    </form>\r\n}\r\n\r\nTaskItem = reduxForm({\r\n    form: 'taskForm',\r\n    validate\r\n})(TaskItem)\r\n\r\n\r\nexport default TaskItem;","import './CustomField.css'\r\n\r\nconst CustomField = ({ input, type, meta: { touched, error } }) => (\r\n    <div>\r\n        <input autoComplete=\"off\" className=\"task-input\" {...input} type={type} />\r\n        {touched && error && <span className=\"task-input__error\">{error}</span>}\r\n    </div>\r\n  )\r\n\r\n  export default CustomField;","import { connect } from 'react-redux'\r\nimport { getFormValues } from 'redux-form'\r\nimport './ResultsPage.css'\r\n\r\nconst ResultsPage = ({ result, userName }) => {\r\n  const values = getFormValues('registerForm')(state)\r\n\r\n  return (\r\n    <div className=\"results\">\r\n      <p>{`${values} - молодец!`}</p>\r\n      <p>{`Правильных ответов: ${result} `}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    result: state.finalResult,\r\n    userName: state.userName\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ResultsPage);","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"../../redux/configureStore\";\nimport { Register, TasksMain, ResultsPage } from '..';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { getFormValues } from 'redux-form'\n\nfunction App() {\n  console.log(store.getState())\n\n  let history = useHistory();\n\n  function handleSubmit() {\n    const userName = getFormValues('registerForm')(store.getState())\n    console.log(values)\n    history.push(\"/tasks\");\n  }\n\n  return (\n    <div className=\"page\">\n      <Provider store={store}>\n        <Switch>\n          <Route path=\"/sign-in\">\n            <Register onSubmit={handleSubmit} />\n          </Route>\n          <Route exact path=\"/tasks\">\n            <TasksMain />\n          </Route>\n          <Route exact path=\"/results\">\n            <ResultsPage />\n          </Route>\n          <Redirect to=\"/sign-in\" />\n        </Switch>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}
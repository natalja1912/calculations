{"version":3,"sources":["redux/reducers/tasks.js","utils/tasksGenerator.js","utils/constants.js","redux/actionTypes.js","redux/configureStore.js","redux/reducers/addFinalResult.js","redux/reducers/addUserName.js","utils/nameValidation.js","components/registerPage/parts/CustomTextInput/CustomTextInput.js","components/registerPage/parts/RegisterForm/RegisterForm.js","components/registerPage/RegisterPage.js","redux/actions/UserName.js","components/tasksPage/parts/CustomField/CustomField.js","utils/numbersValidation.js","components/tasksPage/parts/TaskItem/TaskItem.js","components/tasksPage/parts/Tasks/Tasks.js","utils/getFinalResult.js","components/tasksPage/TasksPage.js","redux/actions/FinalResult.js","components/resultsPage/ResultsPage.js","components/App/App.js","index.js"],"names":["TASKS","tasksNumber","tasks","i","num1","Math","floor","random","num2","sign","round","push","tasksGenerator","ADD_RESULT","ADD_USER_NAME","rootReducer","combineReducers","state","action","type","finalResult","ActionTypes","payload","userName","form","formReducer","store","createStore","validateName","values","errors","name","length","CustomTextInput","input","meta","touched","error","autoComplete","className","maxLength","RegisterForm","handleSubmit","onSubmit","htmlFor","Field","component","onClick","reduxForm","myFormValueSelector","formValueSelector","connect","dispatch","addName","UserName","history","useHistory","CustomField","validate","TaskItem","task","index","Tasks","data","console","log","map","getFinalResult","rightAnswers","result","Number","parseInt","addResult","FinalResult","valuesLength","getFormValues","Object","keys","rightAnswersNumber","App","path","exact","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60c0d433.chunk.js","sourcesContent":["import tasksGenerator from '../../utils/tasksGenerator';\r\nimport TASKS_NUMBER from '../../utils/constants';\r\n\r\nconst TASKS = tasksGenerator(TASKS_NUMBER);\r\n\r\nexport const Tasks = (state = TASKS, action) => {\r\n    switch (action.type) {\r\n        default:\r\n          return state;\r\n      }\r\n};\r\n","const tasksGenerator = (tasksNumber) => {\r\n    const tasks = [];  \r\n\r\n    for (let i = 0; i < tasksNumber; i++) {\r\n        const num1 = Math.floor(Math.random() * 100);\r\n        const num2 = Math.floor(Math.random() * 100);\r\n        const sign = Math.round(Math.random());\r\n        tasks.push({ num1: num1, num2: num2, sign: sign })\r\n    }\r\n    return tasks;\r\n}\r\n\r\nexport default tasksGenerator;","const TASKS_NUMBER = 10;\r\n\r\nexport default TASKS_NUMBER;","export const ADD_RESULT = \"ADD_RESULT\";\r\nexport const ADD_USER_NAME = \"ADD_USER_NAME\";\r\n\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { Tasks } from './reducers/tasks'\r\nimport { addFinalResult } from \"./reducers/addFinalResult\";\r\nimport { addUserName } from \"./reducers/addUserName\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: Tasks,\r\n  finalResult: addFinalResult,\r\n  userName: addUserName,\r\n  form: formReducer\r\n})\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store;\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const addFinalResult = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_RESULT:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const addUserName = (state = 'Аноним', action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_USER_NAME:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","function validateName (values) {\r\n    const errors = {};\r\n    if (!values.name) {\r\n        errors.name = 'Заполните поле';\r\n    } else if (values.name.length < 3) {\r\n        errors.name = 'Введите не менее 3х символов';\r\n    }\r\n    else if (values.name.length > 14) {\r\n        errors.name = 'Введите не более 15 символов';\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport default validateName","import './CustomTextInput.css'\r\n\r\nconst CustomTextInput = ({ input, type, meta: { touched, error } }) => (\r\n    <div>\r\n        <input autoComplete=\"off\" className=\"input-name\" {...input} type={type} maxLength='15' />\r\n        {touched && error && <span className=\"input-name__error\">{error}</span>}\r\n    </div>\r\n  )\r\n\r\n  export default CustomTextInput;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport validateName from '../../../../utils/nameValidation';\r\nimport CustomTextInput from '../CustomTextInput/CustomTextInput';\r\nimport './RegisterForm.css'\r\n\r\nlet RegisterForm = ({handleSubmit}) => {\r\n    return (\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n                <label className=\"form__label\" htmlFor=\"name\">Введите имя</label>\r\n                <Field className=\"form__input\" name=\"name\" type=\"text\" component={CustomTextInput}  />\r\n                <button className=\"form__button form__button_active\" onClick={handleSubmit}>Готово!</button>\r\n                : <div className=\"form__button form__button_inactive\">Готово!</div>\r\n            </form>\r\n    );\r\n};\r\n\r\nRegisterForm = reduxForm({\r\n    form: 'registerForm',\r\n    validateName\r\n})(RegisterForm)\r\n\r\nexport default RegisterForm;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { formValueSelector } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport RegisterForm from './parts/RegisterForm/RegisterForm';\r\nimport { UserName } from '../../redux/actions/UserName'\r\nimport './RegisterPage.css'\r\n\r\nconst RegisterPage = ({ addName, userName }) => {\r\n    let history = useHistory();\r\n\r\n    function handleSubmit() {\r\n        addName(userName);\r\n        history.push(\"/tasks\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <RegisterForm onSubmit={handleSubmit} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst myFormValueSelector = formValueSelector('registerForm');\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      userName: myFormValueSelector(state, 'name')\r\n    }\r\n  }\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addName: name => dispatch(UserName(name))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\r\n","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const UserName = (name) => ({\r\n    type: ActionTypes.ADD_USER_NAME,\r\n    payload: name\r\n});\r\n","import './CustomField.css'\r\n\r\nconst CustomField = ({ input, type, meta: { touched, error } }) => (\r\n    <div>\r\n        <input autoComplete=\"off\" className=\"task-input\" {...input} type={type} />\r\n        {touched && error && <span className=\"task-input__error\">{error}</span>}\r\n    </div>\r\n  )\r\n\r\n  export default CustomField;","function validate(values) {\r\n    const errors = {};\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        let name = `task${i}`\r\n        if (values[name] && values[name].length > 3) {\r\n            errors[name] = \"Введите не более 3х цифр\";\r\n        }\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default validate;","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport CustomField from '../CustomField/CustomField'\r\nimport validate from '../../../../utils/numbersValidation'\r\nimport './TaskItem.css'\r\n\r\nlet TaskItem = ({ task, index, handleSubmit }) => {\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div className=\"task\">\r\n            <div className=\"task__text-group\">            \r\n                <p className='task__text'>{task.num1}</p>\r\n                <p className='task__text'>{task.sign === 1 ? ' + ' : ' - '}</p>\r\n                <p className='task__text'>{`${task.num2} =`}</p></div>\r\n            <Field name={`task${index}`}\r\n                component={CustomField}\r\n                type=\"number\"\r\n            />\r\n        </div>\r\n    </form>\r\n}\r\n\r\nTaskItem = reduxForm({\r\n    form: 'taskForm',\r\n    validate\r\n})(TaskItem)\r\n\r\n\r\nexport default TaskItem;","import TaskItem from '../TaskItem/TaskItem'\r\nimport './Tasks.css'\r\n\r\nconst Tasks = ({tasks}) => {\r\n\r\n    function handleSubmit(data) {\r\n        console.log(data)\r\n    }\r\n    return (\r\n        <div className=\"tasks\">\r\n            {tasks && <ul>\r\n                {tasks.map((task, index) => (\r\n                    <li key={index}>\r\n                        <TaskItem\r\n                            onSubmit={handleSubmit}\r\n                            task={task}\r\n                            index={index}\r\n                        />\r\n                    </li>\r\n                ))}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;","function getFinalResult(tasks, values) {\r\n    let rightAnswers = 0;\r\n    for (let i = 0; i < tasks.length; i++) {\r\n        let task = tasks[i];\r\n        let name = `task${i}`\r\n        let result = values[name];\r\n        result = Number.parseInt(result);\r\n        let answer;\r\n        task.sign < 1 ? answer = task.num1 - task.num2 : answer = task.num1 + task.num2;\r\n        answer === result && rightAnswers++;\r\n    }\r\n\r\n    return rightAnswers;\r\n}\r\n\r\nexport default getFinalResult;","import Tasks from './parts/Tasks/Tasks'\r\nimport { getFormValues } from 'redux-form'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport getFinalResult from '../../utils/getFinalResult';\r\nimport { FinalResult } from '../../redux/actions/FinalResult';\r\nimport './TasksPage.css'\r\n\r\nlet TasksMain = ({ state, tasks, addResult }) => {\r\n  let history = useHistory()\r\n\r\n  /*достаем из формы taskForm все заполненные поля\r\n  (результаты вычислений) и проверяем их количество*/\r\n  const values = getFormValues('taskForm')(state)\r\n  let valuesLength;\r\n  values ? valuesLength = Object.keys(values).length : valuesLength = 0;\r\n\r\n  function handleSubmit() {\r\n    history.push(\"/results\");\r\n    const rightAnswersNumber = getFinalResult(tasks, values);\r\n    addResult(rightAnswersNumber);\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculations\">\r\n      <h1 className=\"calculations__heading\">Проверьте свои знания</h1>\r\n      <Tasks tasks={tasks} />\r\n      {(!values || valuesLength !== 10) &&\r\n        <div className=\"form__error\">Решите все примеры</div>\r\n      }\r\n      {(values && valuesLength === 10) ?\r\n        <button className=\"form__button form__button_active\" onClick={handleSubmit}>Готово!</button>\r\n        : <div className=\"form__button form__button_inactive\">Готово!</div>\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state: state,\r\n    tasks: state.tasks\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addResult: result => dispatch(FinalResult(result))\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksMain)","import * as ActionTypes from '../actionTypes';\r\n\r\nexport const FinalResult = (result) => ({\r\n    type: ActionTypes.ADD_RESULT,\r\n    payload: result\r\n});\r\n","import { connect } from 'react-redux'\r\nimport './ResultsPage.css'\r\n\r\nconst ResultsPage = ({ result, userName }) => {\r\n\r\n  return (\r\n    <div className=\"results\">\r\n      <p>{`${userName} - молодец!`}</p>\r\n      <p>{`Правильных ответов: ${result} `}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    result: state.finalResult,\r\n    userName: state.userName\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(ResultsPage);","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"../../redux/configureStore\";\nimport { RegisterPage, TasksPage, ResultsPage } from '..';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"page\">\n      <Provider store={store}>\n        <Switch>\n          <Route path=\"/sign-in\">\n            <RegisterPage />\n          </Route>\n          <Route exact path=\"/tasks\">\n            <TasksPage />\n          </Route>\n          <Route exact path=\"/results\">\n            <ResultsPage />\n          </Route>\n          <Redirect to=\"/sign-in\" />\n        </Switch>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}